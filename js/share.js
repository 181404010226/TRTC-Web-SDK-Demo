/* eslint-disable*/
import { 
  setButtonLoading, 
  setButtonDisabled, 
  addSuccessLog, 
  addFailedLog, 
  reportSuccessEvent, 
  reportFailedEvent 
} from './utils.js';
import { sdkAppId, roomId, userId } from './room.js';

let isShared = false;

export async function startShare(trtc) {
  setButtonLoading('startShare', true);
  try {
    await trtc.startScreenShare();
    isShared = true;
    setButtonLoading('startShare', false);
    setButtonDisabled('startShare', true);
    reportSuccessEvent('startScreenShare', 0);
    addSuccessLog(`${userId ? `[${userId}]` : ''} startScreenShare.`);
  } catch (error) {
    console.log('startShare error', error);
    setButtonLoading('startShare', false);
    reportFailedEvent({
      name: 'startScreenShare',
      sdkAppId,
      roomId,
      error,
      type: 'share'
    });
    addFailedLog(`${userId ? `[${userId}]` : ''} startScreenShare failed.`);
  }
}

export async function stopShare(trtc) {
  if (!isShared) {
    addFailedLog('The screen share has not been started');
    return;
  }
  setButtonLoading('stopShare', true);
  try {
    await trtc.stopScreenShare();
    isShared = false;
    setButtonLoading('stopShare', false);
    setButtonDisabled('startShare', false);
    reportSuccessEvent('stopScreenShare', 0);
    addSuccessLog(`${userId ? `[${userId}]` : ''} stopScreenShare.`);
  } catch (error) {
    console.log('stopShare error', error);
    setButtonLoading('stopShare', false);
    reportFailedEvent({
      name: 'startScreenShare',
      sdkAppId,
      roomId,
      error,
      type: 'share'
    });
    addFailedLog(`${userId ? `[${userId}]` : ''} stopScreenShare failed.`);
  }
}

export function createShareLink() {
  // Generate a random user ID as the visitor ID
  const visitorId = String(Math.floor(Math.random() * 1000000));
  
  // Use the current room ID
  const currentRoomId = roomId;
  
  // Create a URL without UserSig
  // Visitors will request UserSig from the server when they click the link
  const { origin } = window.location;
  const pathname = window.location.pathname.replace('index.html', 'invite/invite.html');
  
  // Only pass the room ID, UserSig will be generated by the server
  return `${origin}${pathname}?roomId=${currentRoomId}`;
}

export { isShared }; 